package streams;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class StreamOperations {
	
	public static void main(String[] args)
	{
		
		 
	        
	       //Use FlatMap to get one common List of all subordinates of all employees
		   List < Employee > employees1 = new ArrayList < Employee > ();
	       employees1.add(new Employee(10, "Ramesh", 30, 400000,true,Arrays.asList("Ram","Shyam")));
	       employees1.add(new Employee(20, "John", 29, 350000,false,Arrays.asList("Sita","Gita")));
	       employees1.add(new Employee(30, "Shaheer", 29, 350000,false,Arrays.asList("Sita","Gita")));
	     
		 
	       
	       List<String> allsubs1 = employees1.stream().map(Employee::getSubordinates)
	                                                   .flatMap(List::stream)
	                                                   .collect(Collectors.toList());
	       
	       System.out.println("List of all subordinates generated by flatMap-"
	               + allsubs1);
	       
	       Long ct = employees1.stream().map(Employee::getSubordinates)
                   .flatMap(List::stream).count();
	       System.out.println("Total subordinates or ppl reporting to managers-"
	               + ct);
	       
	       ct = employees1.stream().map(Employee::getSubordinates)
                   .flatMap(List::stream).distinct().count();
	       System.out.println("Total subordinates or ppl reporting to managers eliminating duplicates-"
	               + ct);
	       
	      allsubs1 = employees1.stream().map(Employee::getSubordinates)
                   .flatMap(List::stream)
                   .distinct()
                   .sorted()
                   .collect(Collectors.toList());

	      System.out.println("List of all subordinates generated by flatMap-"
	    		  + allsubs1);

	       //anymatch,allmatch,nonematch
	      boolean match = employees1.stream().map(Employee::getSubordinates)
                  .flatMap(List::stream)
                  .anyMatch(n->n.startsWith("S"));

	      System.out.println("is there any junior that starts with 'S'"+ match);
	      
	      match = employees1.stream().map(Employee::getSubordinates)
                  .flatMap(List::stream)
                  .allMatch(n->n.startsWith("S"));

	      System.out.println("does all junior start with 'S'"+ match);
	      
	      match = employees1.stream().map(Employee::getSubordinates)
                  .flatMap(List::stream)
                  .noneMatch(n->n.startsWith("Z"));

	      System.out.println("ensure no junior starts with 'Z'"+ match);


	      
	        
	}

}
